// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles and account types
enum UserRole {
  USER
  ADMIN
  OWNER
}

enum CalendarProvider {
  GOOGLE
  MICROSOFT
}

// User model with authentication, workspace, and role management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String   // Use hashing in application logic
  role      UserRole @default(USER)
  
  // Workspace isolation
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  
  // Authentication and tracking
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  notes     Note[]
  calendars CalendarIntegration[]
}

// Workspace model for multi-tenant SAAS
model Workspace {
  id        String   @id @default(cuid())
  name      String
  users     User[]
  notes     Note[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Note model with unique slug and block support
model Note {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  title     String
  content   String?  @db.Text
  
  // Relationships
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  
  blocks      Block[]
  
  // Calendar event associations
  calendarEvents CalendarEvent[]
  
  // Metadata
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Block model for granular content within notes
model Block {
  id          String   @id @default(cuid())
  content     Json     
  slug        String?  
  noteId      Int      
  note        Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  type        String?  
  order       Int      @default(0)
  metadata    Json?    
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Remove or modify this constraint
  @@unique([noteId, slug], map: "block_unique_constraint")
}

// Calendar Integration model
model CalendarIntegration {
  id            String          @id @default(cuid())
  provider      CalendarProvider
  accessToken   String
  refreshToken  String
  
  // Relationships
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  
  // Calendar events
  events        CalendarEvent[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

// Calendar Event model
model CalendarEvent {
    id            String   @id @default(cuid())
    externalId    String   
    title         String
    description   String?
    startTime     DateTime
    endTime       DateTime
    
    calendarIntegrationId String
    calendarIntegration   CalendarIntegration @relation(fields: [calendarIntegrationId], references: [id])
    
    noteId        Int?     
    note          Note?    @relation(fields: [noteId], references: [id])
    
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    @@unique([externalId, calendarIntegrationId])
}
