// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles and account types
enum UserRole {
  USER
  ADMIN
  OWNER
}

enum CalendarProvider {
  GOOGLE
  MICROSOFT
}

// User model with authentication, workspace, and role management
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  provider      String?
  role          UserRole  @default(USER)
  
  // Make workspaceId optional during initial signup
  workspaceId   String?
  workspace     Workspace? @relation(fields: [workspaceId], references: [id])
  
  // Authentication and tracking
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  notes         Note[]
  calendars     CalendarIntegration[]
  tags          Tag[]    // Add this line to complete the relation
}

// Workspace model for multi-tenant SAAS
model Workspace {
  id        String   @id @default(cuid())
  name      String
  users     User[]
  notes     Note[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Note model with unique slug and block support
model Note {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  title     String
  content   String?  @db.Text
  
  // Relationships
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  
  blocks      Block[]
  
  // Calendar event associations
  calendarEvents CalendarEvent[]
  
  // Add tags relation
  tags      NoteTags[]
  
  // Metadata
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Block model for granular content within notes
model Block {
  id          String   @id @default(cuid())
  content     Json     
  slug        String?  
  noteId      Int      
  note        Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  type        String?  
  order       Int      @default(0)
  metadata    Json?    
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Remove or modify this constraint
  @@unique([noteId, slug], map: "block_unique_constraint")
}

// Calendar Integration model
model CalendarIntegration {
  id            String           @id @default(cuid())
  userId        String
  provider      CalendarProvider
  accessToken   String
  refreshToken  String
  expiresAt     DateTime
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  user          User             @relation(fields: [userId], references: [id])
  events        CalendarEvent[]

  @@unique([userId, provider])  // Add this line if it's missing
}

model CalendarEvent {
  id                    String   @id @default(cuid())
  externalId            String   // ID from Google/Microsoft
  recurringEventId      String?
  iCalUID              String?
  title                String
  description          String?  // Added description field
  startTime            DateTime
  endTime              DateTime
  calendarIntegrationId String
  noteId               Int?     
  
  // Relations
  calendarIntegration   CalendarIntegration @relation(fields: [calendarIntegrationId], references: [id])
  note                  Note?    @relation(fields: [noteId], references: [id])

  // Timestamps
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Indexes and constraints
  @@unique([externalId, calendarIntegrationId])
  @@index([recurringEventId])
}
// Add these models to your schema

model Tag {
    id        String   @id @default(cuid())
    name      String
    userId    String
    createdAt DateTime @default(now())
    notes     NoteTags[]
    user      User     @relation(fields: [userId], references: [id])

    @@unique([name, userId])
}

model NoteTags {
    noteId    Int
    tagId     String
    note      Note     @relation(fields: [noteId], references: [id])
    tag       Tag      @relation(fields: [tagId], references: [id])

    @@id([noteId, tagId])
}

// Remove the duplicate Note model definition at the end
